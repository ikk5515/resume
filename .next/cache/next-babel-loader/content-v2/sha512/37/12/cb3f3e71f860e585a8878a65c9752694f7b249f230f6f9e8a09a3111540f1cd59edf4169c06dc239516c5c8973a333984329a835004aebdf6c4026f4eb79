{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/ingi/Desktop/coding/github.io/untitled folder/component/skill/row.tsx\";\nimport { Row, Col, Badge } from 'reactstrap';\nimport { Style } from '../common/Style';\nimport Util from '../common/Util';\nexport default function SkillRow(_ref) {\n  var skill = _ref.skill,\n      index = _ref.index;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [index > 0 ? /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 20\n    }, this) : '', /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        sm: 12,\n        md: 3,\n        className: \"text-md-right\",\n        children: /*#__PURE__*/_jsxDEV(\"h4\", {\n          style: Style.gray,\n          children: skill.category\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        sm: 12,\n        md: 9,\n        children: createCalculatedSkillItems(skill.items)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n}\n_c = SkillRow;\n\nfunction createCalculatedSkillItems(items) {\n  var _this = this;\n\n  var log = Util.debug('SkillRow:createCalculatedSkillItems');\n  /**\n   * @developer_commentary 단을 3단, 4단을 시도해봤지만 생각보다 이쁘게 나오지 않았고, 우선은 3단으로 한다. 만약 이쪽을 발전시킨다면 조금 더 이쁘고 능동적이게 데이터를 쪼갤 수 있는 방법을 찾으면 될 듯..\n   */\n\n  var layer = 3; // const splitPoint = layer % 2 ? Math.ceil(items.length / layer) : Math.floor(items.length / layer);\n\n  var splitPoint = Math.ceil(items.length / layer);\n  var list = [];\n\n  for (var i = 0, splitAfter = splitPoint; i < layer; i += 1, splitAfter += splitPoint) {\n    list.push(items.slice(splitAfter - splitPoint, i === layer - 1 ? undefined : splitAfter));\n  }\n\n  log('origin', items, items.length, splitPoint);\n  log('list', list);\n  return /*#__PURE__*/_jsxDEV(Row, {\n    className: \"mt-2 mt-md-0\",\n    children: list.map(function (skills, index) {\n      return /*#__PURE__*/_jsxDEV(Col, {\n        md: 4,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: skills.map(function (skill, skillIndex) {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [createBadge(skill.level), skill.title]\n            }, skillIndex.toString(), true, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 19\n            }, _this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, _this)\n      }, index.toString(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, _this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n\nfunction createBadge(level) {\n  if (!level) {\n    return '';\n  }\n\n  var color = function () {\n    switch (level) {\n      case 3:\n        {\n          return 'primary';\n        }\n\n      case 2:\n        {\n          return 'secondary';\n        }\n\n      case 1:\n      default:\n        {\n          return 'light';\n        }\n    }\n  }();\n\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    children: [/*#__PURE__*/_jsxDEV(Badge, {\n      pill: true,\n      color: color,\n      children: level\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), ' ']\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"SkillRow\");","map":{"version":3,"sources":["/Users/ingi/Desktop/coding/github.io/untitled folder/component/skill/row.tsx"],"names":["Row","Col","Badge","Style","Util","SkillRow","skill","index","gray","category","createCalculatedSkillItems","items","log","debug","layer","splitPoint","Math","ceil","length","list","i","splitAfter","push","slice","undefined","map","skills","skillIndex","createBadge","level","title","toString","color"],"mappings":"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","sourcesContent":["import { PropsWithChildren } from 'react';\nimport { Row, Col, Badge } from 'reactstrap';\nimport { ISkill } from './ISkill';\nimport { Style } from '../common/Style';\nimport Util from '../common/Util';\n\nexport default function SkillRow({\n  skill,\n  index,\n}: PropsWithChildren<{ skill: ISkill.Skill; index: number }>) {\n  return (\n    <div>\n      {index > 0 ? <hr /> : ''}\n      <Row>\n        <Col sm={12} md={3} className=\"text-md-right\">\n          <h4 style={Style.gray}>{skill.category}</h4>\n        </Col>\n        <Col sm={12} md={9}>\n          {/* {skill.items.map((item) => JSON.stringify(item, null, 2))} */}\n          {createCalculatedSkillItems(skill.items)}\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nfunction createCalculatedSkillItems(items: ISkill.Item[]) {\n  const log = Util.debug('SkillRow:createCalculatedSkillItems');\n\n  /**\n   * @developer_commentary 단을 3단, 4단을 시도해봤지만 생각보다 이쁘게 나오지 않았고, 우선은 3단으로 한다. 만약 이쪽을 발전시킨다면 조금 더 이쁘고 능동적이게 데이터를 쪼갤 수 있는 방법을 찾으면 될 듯..\n   */\n  const layer = 3;\n\n  // const splitPoint = layer % 2 ? Math.ceil(items.length / layer) : Math.floor(items.length / layer);\n  const splitPoint = Math.ceil(items.length / layer);\n\n  const list: ISkill.Item[][] = [];\n\n  for (let i = 0, splitAfter = splitPoint; i < layer; i += 1, splitAfter += splitPoint) {\n    list.push(items.slice(splitAfter - splitPoint, i === layer - 1 ? undefined : splitAfter));\n  }\n\n  log('origin', items, items.length, splitPoint);\n  log('list', list);\n\n  return (\n    <Row className=\"mt-2 mt-md-0\">\n      {list.map((skills, index) => {\n        return (\n          <Col md={4} xs={12} key={index.toString()}>\n            <ul>\n              {skills.map((skill, skillIndex) => {\n                return (\n                  <li key={skillIndex.toString()}>\n                    {createBadge(skill.level)}\n                    {skill.title}\n                  </li>\n                );\n              })}\n            </ul>\n          </Col>\n        );\n      })}\n    </Row>\n  );\n}\n\nfunction createBadge(level?: ISkill.Item['level']) {\n  if (!level) {\n    return '';\n  }\n\n  const color = (() => {\n    switch (level) {\n      case 3: {\n        return 'primary';\n      }\n      case 2: {\n        return 'secondary';\n      }\n      case 1:\n      default: {\n        return 'light';\n      }\n    }\n  })();\n\n  return (\n    <span>\n      <Badge pill color={color}>\n        {level}\n      </Badge>{' '}\n    </span>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}